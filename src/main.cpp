#include <HardwareSerial.h>
#include <BluetoothSerial.h>

#define GPS_BAUDRATE 115200  // The default baudrate of most GPS modules is 9600

#define RXD2 16
#define TXD2 17

HardwareSerial gpsSerial(2);  // GPS module connected to Serial2
BluetoothSerial SerialBT;

/**
 * @brief Sends a UBX (u-blox) command to the GPS module.
 *
 * @param payload Pointer to the array containing the UBX command payload.
 *                The payload should not include the preamble bytes (0xB5, 0x62)
 *                and the checksum bytes (CK_A, CK_B) as they are added internally.
 *                The function automatically calculates and appends the checksum
 *                to the payload before sending it to the GPS module.
 * 
 * @param length  The length of the UBX command payload.
 * 
 * @note The UBX protocol requires a specific start sequence (preamble) and
 *       checksum bytes at the end of each command. This function handles the
 *       generation of the preamble and checksum, allowing the caller to provide
 *       only the essential payload. Including preamble and checksum in the payload
 *       is not necessary, as this function takes care of their generation.
 */
void sendUBXCommand(const uint8_t *payload, size_t length) {
  uint8_t ckA = 0, ckB = 0;

  // Calculate Fletcher checksum for payload
  for (uint16_t i = 0; i < length; i++) {
    ckA = (ckA + payload[i]) % 256;
    ckB = (ckB + ckA) % 256;
  }

  // Start of UBX frame
  gpsSerial.write(0xB5);
  gpsSerial.write(0x62);

  // Write payload to serial
  for (size_t i = 0; i < length; i++) {
    gpsSerial.write(payload[i]);
  }

  // Write checksum to serial
  gpsSerial.write(ckA);
  gpsSerial.write(ckB);

  // Delay to ensure the GPS module processes the command
  delay(100);
}

/**
 * @brief Setup function to initialize the GPS module and configure its settings.
 *
 * @note Some fake GPS modules may encounter issues with the Battery-Backed RAM (BBR)
 *       and flash memory, causing settings to revert to their default after power loss
 *       (cold start). To address this, the GPS module is initially started at the default
 *       baud rate (9600 bps), and all necessary settings, including changing the baud rate
 *       to 115200 bps, are applied. Starting at 9600 bps ensures compatibility with modules
 *       that may have reset to their default settings. The change of baud rate to 115200 bps
 *       is done last to ensure that all other settings are successfully applied before the
 *       switch, as changing the baud rate interrupts communication until it matches on both ends.
 */
void setup() {
  Serial.begin(GPS_BAUDRATE);
  gpsSerial.begin(38400);  // Set the default baud rate
  SerialBT.begin("ESP32_GPS_Proxy");  // Set default Bluetooth device name

  String macAddress = SerialBT.getBtAddressString();
  String UID = macAddress.substring(9, 11) + macAddress.substring(12, 14) + macAddress.substring(15, 17);

  SerialBT.begin("GPS-" + UID);

  // Configure GNSS settings
  uint8_t CFG_GNSS[][40] = {
    //{0x06, 0x3E, 0x24, 0x00, 0x00, 0x16, 0x05, 0x04, 0x00, 0x04, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
    {0x06, 0x3E, 0x24, 0x00, 0x00, 0x16, 0x16, 0x04, 0x00, 0x08, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  };

  for (size_t i = 0; i < (sizeof(CFG_GNSS) / sizeof(CFG_GNSS[0])); i++) {
    sendUBXCommand(CFG_GNSS[i], sizeof(CFG_GNSS[0]));
  }

  // Configure NMEA message output
  uint8_t CFG_MSG[][12] = {
    {0x06, 0x01, 0x08, 0x00, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0B, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0B, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0B, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x21, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0A, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0A, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0A, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0A, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0A, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0A, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0A, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0D, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0x0D, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
    {0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
    {0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
    {0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
    {0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01},
    {0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
    {0x06, 0x01, 0x08, 0x00, 0xF0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0xF0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0xF0, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0xF0, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0xF0, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0xF1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0xF1, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x01, 0x08, 0x00, 0xF1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  };

  for (size_t i = 0; i < (sizeof(CFG_MSG) / sizeof(CFG_MSG[0])); i++) {
    sendUBXCommand(CFG_MSG[i], sizeof(CFG_MSG[0]));
  }

  // Configure NMEA settings
  uint8_t CFG_NMEA[][16] = {
    {0x06, 0x17, 0x0C, 0x00, 0x00, 0x21, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00},
  };

  for (size_t i = 0; i < (sizeof(CFG_NMEA) / sizeof(CFG_NMEA[0])); i++) {
    sendUBXCommand(CFG_NMEA[i], sizeof(CFG_NMEA[0]));
  }

  // Configure NAV5 settings
  uint8_t CFG_NAV5[][40] = {
    {0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  };

  for (size_t i = 0; i < (sizeof(CFG_NAV5) / sizeof(CFG_NAV5[0])); i++) {
    sendUBXCommand(CFG_NAV5[i], sizeof(CFG_NAV5[0]));
  }  

  // Configure NAV5X settings
  uint8_t CFG_NAV5X[][44] = {
    {0x06, 0x23, 0x28, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x4F, 0x00, 0x00, 0x00, 0x03, 0x02, 0x03, 0x16, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9B, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x64, 0x64, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00}
  };

  for (size_t i = 0; i < (sizeof(CFG_NAV5X) / sizeof(CFG_NAV5X[0])); i++) {
    sendUBXCommand(CFG_NAV5X[i], sizeof(CFG_NAV5X[0]));
  }  

  // Configure VFG_ITFM settings
  uint8_t CFG_ITFM[][12] = {
    {0x06, 0x39, 0x08, 0x00, 0xF3, 0xAC, 0x62, 0xAD, 0x1E, 0x63, 0x00, 0x00}
  };

  for (size_t i = 0; i < (sizeof(CFG_ITFM) / sizeof(CFG_ITFM[0])); i++) {
    sendUBXCommand(CFG_ITFM[i], sizeof(CFG_ITFM[0]));
  }  

  // Configure rate settings to 18HZ
  uint8_t CFG_RATE[][10] = {
    {0x06, 0x08, 0x06, 0x00, 0x32, 0x00, 0x01, 0x00, 0x00, 0x00}
  };

  for (size_t i = 0; i < (sizeof(CFG_RATE) / sizeof(CFG_RATE[0])); i++) {
    sendUBXCommand(CFG_RATE[i], sizeof(CFG_RATE[0]));
  }

  // Configure SBAS settings
  uint8_t CFG_SBAS[][12] = {
    {0x06, 0x16, 0x08, 0x00, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00}
  };

  for (size_t i = 0; i < (sizeof(CFG_SBAS) / sizeof(CFG_SBAS[0])); i++) {
    sendUBXCommand(CFG_SBAS[i], sizeof(CFG_SBAS[0]));
  }

  // Change baud rate to 115200 bps (must be the last setting applied)
  uint8_t CFG_PRT[][24] = {
    {0x06, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x00, 0x14, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x00, 0x14, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x00, 0x14, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xC0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00}
  };

  for (size_t i = 0; i < (sizeof(CFG_PRT) / sizeof(CFG_PRT[0])); i++) {
    sendUBXCommand(CFG_PRT[i], sizeof(CFG_PRT[0]));
  }

  // Change GPS baud rate to 115200 bps
  gpsSerial.begin(GPS_BAUDRATE);
}

void loop() {
  // Read data from the GPS module and transmit it over Bluetooth and Serial
  if (gpsSerial.available() > 0) {
    char gpsData = gpsSerial.read();
    SerialBT.write(gpsData);  // Transmit GPS data over Bluetooth
    Serial.write(gpsData); // Transmit GPS data over Serial
  }

  // Read data from Bluetooth and transmit it to the GPS module and Serial
  if (SerialBT.available() > 0) {
    char btData = SerialBT.read();
    gpsSerial.write(btData);
    Serial.write(btData);
  }

  // Read data from Serial and transmit it to the GPS module and Bluetooth
  if(Serial.available() > 0) {
    char sData = Serial.read();
    gpsSerial.write(sData);
    SerialBT.write(sData);
  }
}